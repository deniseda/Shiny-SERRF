if(any(table(p$batch, p$sampleType)[,'qc']<6)){
stop("Some batches has a small number of QC that is not enough for training model. Each batch should have at least 6 QCs.")
}
# check with missing value.
num_miss = sum(is.na(e))
if(num_miss>0){
cat(paste0("Your dataset has ",num_miss," missing values (i.e. empty cell). These missing values will be replaced by half of the minimum of non-missing value for each compound.\n"))
for(i in 1:nrow(e)){
e[i, is.na(e[i,])] = 0.5 * min(e[i, !is.na(e[i,])])
}
}
# check with zero values.
num_zero = sum(e == 0)
if(num_zero>0){
cat(paste0("Your dataset has ",num_zero," zeros. These zeros will be kept zeros in the final normalized data. \n"))
}
p$sample_index = paste0('p',1:nrow(p))
original_colnames_e = colnames(e)
colnames(e) = p$sample_index
# Empty sampleType will not be used for normalization, but will be put back in the final sheet.
if(any(is.na(p$sampleType))){
cat(paste0("There are ",sum(is.na(p$sampleType))," empty cells in the 'sampleType'. They will not be used for normalization, but will be put back in the final sheet. \n"))
}
# !!! when there is no na, this needs modification.
p_empty_sampleType = p[is.na(p$sampleType), ]
e_empty_sampleType = e[,is.na(p$sampleType)]
if('numeric' %in% class(e_empty_sampleType)){
e_empty_sampleType = matrix(e_empty_sampleType, ncol = 1)
}
colnames(e_empty_sampleType) = p_empty_sampleType$sample_index
e = e[, !is.na(p$sampleType)]
p = p[!is.na(p$sampleType), ]
infinite_index = which(apply(e, 1, function(x){
sum(is.infinite(x)) == length(x)
}))
if(!length(infinite_index)==0){
e_infinite = e[infinite_index,]
f_infinite = f[infinite_index,]
e = e[-infinite_index,]
f = f[-infinite_index,]
}
qc_RSDs = list()
normalized_dataset = list()
calculation_times = list()
with_validate = any(!p$sampleType %in% c('qc','sample'))
# split e, and p to different sample type.
e_qc = e[, p$sampleType == 'qc']
e_sample = e[, p$sampleType == 'sample']
p_qc = p[p$sampleType == 'qc',]
p_sample = p[p$sampleType == 'sample',]
e_validates = list()
p_validates = list()
if(with_validate){
val_RSDs = list()
validate_types = unique(p$sampleType[!p$sampleType %in% c('qc','sample')])
for(validate_type in validate_types){
e_validates[[validate_type]] = e[, p$sampleType %in% validate_type]
p_validates[[validate_type]] = p[p$sampleType %in% validate_type, ]
val_RSDs[[validate_type]] = list()
}
}else{
validate_types = NULL
}
aggregate_e = function(e_qc,e_sample,e_validates){
e = do.call('cbind',c(list(e_qc, e_sample), e_validates))
e = e[,order(as.numeric(gsub("p","",colnames(e))))]
return(e)
}
# start
start = Sys.time()
normalized_dataset[['none']] = aggregate_e(e_qc,e_sample,e_validates)
qc_RSDs[['none']] = RSD(e_qc)
calculation_times[['none']] = Sys.time() - start
cat("<!--------- raw data --------->\n")
cat(paste0("Average QC RSD:",signif(median(qc_RSDs[['none']],na.rm = TRUE),4)*100,"%.\n"))
cat(paste0("Number of compounds less than 20% QC RSD:",sum(qc_RSDs[['none']]<0.2,na.rm = TRUE),".\n"))
if(with_validate){
# for each type of validate.
for(validate_type in validate_types){
val_RSDs[[validate_type]][['none']] = RSD(e_validates[[validate_type]])
cat(paste0("Average ",validate_type," RSD:",signif(median(val_RSDs[[validate_type]][['none']],na.rm = TRUE),4)*100,"%.\n"))
cat(paste0("Number of compounds less than 20% ",validate_type," RSD:",sum(val_RSDs[[validate_type]][['none']]<0.2,na.rm = TRUE),".\n"))
}
}
if(e[1,1] == 167879 & nrow(p) == 1299){# example
is_example = TRUE
}else{
is_example = FALSE
}
!is_example
minus = FALSE
serrfR = function(train = e[,p$sampleType == 'qc'],
target = e[,p$sampleType == 'sample'],
num = 10,
batch. = factor(c(batch[p$sampleType=='qc'],batch[p$sampleType=='sample'])),
time. = c(time[p$sampleType=='qc'],time[p$sampleType=='sample']),
sampleType. = c(p$sampleType[p$sampleType=='qc'],p$sampleType[p$sampleType=='sample']),minus=minus,cl){
all = cbind(train, target)
normalized = rep(0, ncol(all))
for(j in 1:nrow(all)){
for(b in 1:length(unique(batch.))){
current_batch = levels(batch.)[b]
# fixing zeros.
all[j,batch.%in%current_batch][all[j,batch.%in%current_batch] == 0] = rnorm(length(all[j,batch.%in%current_batch][all[j,batch.%in%current_batch] == 0]),mean = min(all[j,batch.%in%current_batch][!is.na(all[j,batch.%in%current_batch])])+1,sd = 0.1*(min(all[j,batch.%in%current_batch][!is.na(all[j,batch.%in%current_batch])])+.1))
# fixing NAs.
all[j,batch.%in%current_batch][is.na(all[j,batch.%in%current_batch])] = rnorm(length(all[j,batch.%in%current_batch][is.na(all[j,batch.%in%current_batch])]),mean = 0.5*min(all[j,batch.%in%current_batch][!is.na(all[j,batch.%in%current_batch])])+1,sd = 0.1*(min(all[j,batch.%in%current_batch][!is.na(all[j,batch.%in%current_batch])])+.1))
}
}
corrs_train = list()
corrs_target = list()
for(b in 1:length(unique(batch.))){
current_batch = levels(batch.)[b]
train_scale = t(apply(train[,batch.[sampleType.=='qc']%in%current_batch],1,scale))
if(is.null(dim(target[,batch.[!sampleType.=='qc']%in%current_batch]))){ # !!!
target_scale = scale(target[,batch.[!sampleType.=='qc']%in%current_batch])#!!!
}else{
# target_scale = scale(target[,batch.[!sampleType.=='qc']%in%current_batch])#!!!
target_scale = t(apply(target[,batch.[!sampleType.=='qc']%in%current_batch],1,scale))
}
# all_scale = cbind(train_scale, target_scale)
# e_current_batch = all_scale
corrs_train[[current_batch]] = cor(t(train_scale), method = "spearman")
corrs_target[[current_batch]] = cor(t(target_scale), method = "spearman")
# corrs[[current_batch]][is.na(corrs[[current_batch]])] = 0
}
pred = matrix(nrow = nrow(all), ncol = length(sampleType.))
# cs = c()
# withProgress(message = "Normalization in Progress.", value = 0, { # HERE
for(j in 1:nrow(all)){
# incProgress(1/nrow(all), detail = paste("Working on compound", j,"/", nrow(all))) # HERE
print(j) # HERE
if(j == 2){
stop("fine")
}
# j = j+1
# print(j)
normalized  = rep(0, ncol(all))
qc_train_value = list()
qc_predict_value = list()
sample_value = list()
sample_predict_value = list()
for(b in 1:length(levels(batch.))){
current_batch = levels(batch.)[b]
current_time = time.[batch. %in% current_batch]
e_current_batch = all[,batch.%in%current_batch]
corr_train = corrs_train[[current_batch]]
corr_target = corrs_target[[current_batch]]
corr_train_order = order(abs(corr_train[,j]),decreasing = TRUE) #!!! try using corr_target_order[1:num]
corr_target_order = order(abs(corr_target[,j]),decreasing = TRUE)
sel_var = c()
l = num
# print(intersect(corr_train_order[1:l], corr_target_order[1:l]))
while(length(sel_var)<(num)){
sel_var = intersect(corr_train_order[1:l], corr_target_order[1:l])
sel_var = sel_var[!sel_var == j]
l = l+1
}
train.index_current_batch = sampleType.[batch.%in%current_batch]
# train_data_y = scale(e_current_batch[j, train.index_current_batch=='qc'],scale=F) #!!! trying to use different scale. Scale to the test_y
# remove_outlier(e_current_batch[j, train.index_current_batch=='qc'])
factor = sd(e_current_batch[j, train.index_current_batch=='qc'])/sd(e_current_batch[j, !train.index_current_batch=='qc'])
if(factor==0 | is.nan(factor) | factor<1 | is.na(factor)){#!!!
train_data_y = scale(e_current_batch[j, train.index_current_batch=='qc'],scale=F)
}else{
# print(j)
# print("!!")
if(sum(train.index_current_batch=='qc')*2>=sum(!train.index_current_batch=='qc')){
train_data_y = (e_current_batch[j, train.index_current_batch=='qc'] - mean(e_current_batch[j, train.index_current_batch=='qc']))/factor ### need to be careful with outlier!
}else{
train_data_y = scale(e_current_batch[j, train.index_current_batch=='qc'],scale=F)
}
}
train_data_x = apply(e_current_batch[sel_var, train.index_current_batch=='qc'],1,scale)
if(is.null(dim(e_current_batch[sel_var, !train.index_current_batch=='qc']))){
test_data_x = t(scale(e_current_batch[sel_var, !train.index_current_batch=='qc']))
}else{
test_data_x = apply(e_current_batch[sel_var, !train.index_current_batch=='qc'],1,scale)
}
train_NA_index  = apply(train_data_x,2,function(x){
sum(is.na(x))>0
})
train_data_x = train_data_x[,!train_NA_index]
test_data_x = test_data_x[,!train_NA_index]
if(!"matrix" %in% class(test_data_x)){ # !!!
test_data_x = t(test_data_x)
}
good_column = apply(train_data_x,2,function(x){sum(is.na(x))==0}) & apply(test_data_x,2,function(x){sum(is.na(x))==0})
train_data_x = train_data_x[,good_column]
test_data_x = test_data_x[,good_column]
if(!"matrix" %in% class(test_data_x)){ # !!!
test_data_x = t(test_data_x)
}
train_data = data.frame(y = train_data_y,train_data_x )
if(ncol(train_data)==1){# some samples have all QC constent.
norm = e_current_batch[j,]
normalized[batch.%in%current_batch] = norm
}else{
colnames(train_data) = c("y", paste0("V",1:(ncol(train_data)-1)))
set.seed(1)
model = ranger(y~., data = train_data)
test_data = data.frame(test_data_x)
colnames(test_data) = colnames(train_data)[-1]
norm = e_current_batch[j,]
# plot(e_current_batch[j, train.index_current_batch=='qc'], ylim = c(min(c(e_current_batch[j, train.index_current_batch=='qc'],e_current_batch[j, !train.index_current_batch=='qc'])),max(c(e_current_batch[j, train.index_current_batch=='qc'],e_current_batch[j, !train.index_current_batch=='qc']))))
# points(predict(model, data = train_data)$prediction+mean(e_current_batch[j,train.index_current_batch=='qc'],na.rm=TRUE), col = 'red')
# plot(e_current_batch[j,!train.index_current_batch=='qc'], ylim = c(min(c(e_current_batch[j, train.index_current_batch=='qc'],e_current_batch[j, !train.index_current_batch=='qc'])),max(c(e_current_batch[j, train.index_current_batch=='qc'],e_current_batch[j, !train.index_current_batch=='qc']))))
# points(predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'],na.rm=TRUE) - mean(predict(model,data = test_data)$predictions), col = 'red')
#
# plot(y =  e_current_batch[j,], x = current_time, col = factor(train.index_current_batch), ylim = range(c(e_current_batch[j,], norm)))
# plot(y = norm, x = current_time, col = factor(train.index_current_batch), ylim = range(c(e_current_batch[j,], norm)))
if(minus){
norm[train.index_current_batch=='qc'] = e_current_batch[j, train.index_current_batch=='qc']-((predict(model, data = train_data)$prediction+mean(e_current_batch[j,train.index_current_batch=='qc'],na.rm=TRUE))-mean(all[j,sampleType.=='qc'],na.rm=TRUE))
norm[!train.index_current_batch=='qc'] = e_current_batch[j,!train.index_current_batch=='qc']-((predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'],na.rm=TRUE))-(median(all[j,!sampleType.=='qc'],na.rm = TRUE)))
}else{
norm[train.index_current_batch=='qc'] = e_current_batch[j, train.index_current_batch=='qc']/((predict(model, data = train_data)$prediction+mean(e_current_batch[j,train.index_current_batch=='qc'],na.rm=TRUE))/mean(all[j,sampleType.=='qc'],na.rm=TRUE))
# norm[!train.index_current_batch=='qc'] = e_current_batch[j,!train.index_current_batch=='qc']/((predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'],na.rm=TRUE))/(median(all[j,!sampleType.=='qc'],na.rm = TRUE)))
norm[!train.index_current_batch=='qc'] = e_current_batch[j,!train.index_current_batch=='qc']/((predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'],na.rm=TRUE)- mean(predict(model,data = test_data)$predictions))/(median(all[j,!sampleType.=='qc'],na.rm = TRUE)))
# norm[!train.index_current_batch=='qc'] = e_current_batch[j,!train.index_current_batch=='qc']/((predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'],na.rm=TRUE))/(median(e_current_batch[j,!train.index_current_batch=='qc'],na.rm = TRUE)))
}
# norm[!train.index_current_batch=='qc'] =(e_current_batch[j,!train.index_current_batch=='qc'])/((predict(model, data = test_data)$prediction + mean(e_current_batch[j,!train.index_current_batch=='qc'],na.rm=TRUE))/mean(e_current_batch[j,!train.index_current_batch=='qc'],na.rm=TRUE))
norm[!train.index_current_batch=='qc'][norm[!train.index_current_batch=='qc']<0]=e_current_batch[j,!train.index_current_batch=='qc'][norm[!train.index_current_batch=='qc']<0] # fix negative value
# plot(p$time[batch.%in%b][!train.index_current_batch=='qc'], (e_current_batch[j,!train.index_current_batch=='qc'])/((predict(model,data = test_data)$predictions  + mean(e_current_batch[j, train.index_current_batch=='qc'],na.rm=TRUE))/(median(e_current_batch[j,!train.index_current_batch=='qc'],na.rm = TRUE))))
norm[train.index_current_batch=='qc'] = norm[train.index_current_batch=='qc']/(median(norm[train.index_current_batch=='qc'],na.rm=TRUE)/median(all[j,sampleType.=='qc'],na.rm=TRUE)) #!!! putting all to the same batch level.
norm[!train.index_current_batch=='qc'] = norm[!train.index_current_batch=='qc']/(median(norm[!train.index_current_batch=='qc'],na.rm=TRUE)/median(all[j,!sampleType.=='qc'],na.rm=TRUE))
norm[!is.finite(norm)] = rnorm(length(norm[!is.finite(norm)]),sd = sd(norm[is.finite(norm)],na.rm=TRUE)*0.01)# fix infinite
out = boxplot.stats(norm, coef = 3)$out
attempt = ((e_current_batch[j,!train.index_current_batch=='qc'])-((predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'],na.rm=TRUE))-(median(all[j,!sampleType.=='qc'],na.rm = TRUE))))[norm[!train.index_current_batch=='qc']%in%out];
if(length(out)>0 & length(attempt)>0){
if(mean(out)>mean(norm)){
if(mean(attempt)<mean(out)){
norm[!train.index_current_batch=='qc'][norm[!train.index_current_batch=='qc']%in%out] =  attempt# !!! this may not help deal with outlier effect..
}
}else{
if(mean(attempt)>mean(out)){
norm[!train.index_current_batch=='qc'][norm[!train.index_current_batch=='qc']%in%out] =  attempt# !!! this may not help deal with outlier effect..
}
}
}
norm[!train.index_current_batch=='qc'][norm[!train.index_current_batch=='qc']<0]=e_current_batch[j,!train.index_current_batch=='qc'][norm[!train.index_current_batch=='qc']<0]
normalized[batch.%in%current_batch] = norm
# points(current_time, norm, pch = (as.numeric(factor(train.index_current_batch))-1)*19, col = "blue", cex = 0.7)
# qc_train_value[[b]] = train_data_y + mean(e_current_batch[j, train.index_current_batch=='qc'])
# qc_predict_value[[b]] = predict(model,data = train_data)$predictions + mean(e_current_batch[j, train.index_current_batch=='qc'])
# sample_value[[b]] = e_current_batch[j,!train.index_current_batch=='qc']
# sample_predict_value[[b]] = predict(model,data = test_data)$predictions  + mean(e_current_batch[j, !train.index_current_batch=='qc'])
}
}
# par(mfrow=c(1,2))
# ylim = c(min(e[j,],norm), max(e[j,],norm))
# plot(time.[sampleType.=='qc'], unlist(qc_train_value),col = "red",ylim = ylim,main=j)
# points(time.[sampleType.=='qc'],unlist(qc_predict_value),col = "yellow")
#
# points(time.[!sampleType.=='qc'],unlist(sample_value),col = "blue")
# points(time.[!sampleType.=='qc'],unlist(sample_predict_value),col = "green")
#
# plot(time.,normalized, col = factor(sampleType.), ylim = ylim,main=f$label[j])
#
# j = j + 1
#
# plot(x = time., y = normalized, col = factor(sampleType.), ylim = range(c(normalized, all[j,])))
# plot(x = time., y = all[j,], col = factor(sampleType.), ylim = range(c(normalized, all[j,])))
# o = normalized
c = (median(normalized[sampleType.=="sample"])+(median(all[j,sampleType.=="qc"])-median(all[j,!sampleType.=="qc"]))/sd(all[j,!sampleType.=="qc"]) * sd(normalized[sampleType.=="sample"]))/median(normalized[!sampleType.=="sample"])
normalized[sampleType.=="qc"] = normalized[sampleType.=="qc"] * ifelse(c>0,c,1)
# cs[j] = c
pred[j,] = normalized
# print(j)
}#!!!!
# }) # HERE
normed = pred
normed_target = normed[,!sampleType.=='qc']
for(i in 1:nrow(normed_target)){ # fix NA
normed_target[i,is.na(normed_target[i,])] = rnorm(sum(is.na(normed_target[i,])), mean = min(normed_target[i,!is.na(normed_target[i,])], na.rm = TRUE), sd = sd(normed_target[i,!is.na(normed_target[i,])])*0.1)
}
for(i in 1:nrow(normed_target)){ # fix negative value
normed_target[i,normed_target[i,]<0] = runif(1) * min(normed_target[i,normed_target[i,]>0], na.rm = TRUE)
}
normed_train = normed[,sampleType.=='qc']
for(i in 1:nrow(normed_train)){ # fix NA
normed_train[i,is.na(normed_train[i,])] = rnorm(sum(is.na(normed_train[i,])), mean = min(normed_train[i,!is.na(normed_train[i,])], na.rm = TRUE), sd = sd(normed_train[i,!is.na(normed_train[i,])])*0.1)
}
for(i in 1:nrow(normed_train)){ # fix negative value
normed_train[i,normed_train[i,]<0] = runif(1) * min(normed_train[i,normed_train[i,]>0], na.rm = TRUE)
}
return(list(normed_train=normed_train,normed_target=normed_target))
}
serrf_normalized = e
# train = e[,p$sampleType == 'qc']
# target = e[,p$sampleType == 'sample']
# batch. = factor(c(batch[p$sampleType=='qc'],batch[p$sampleType=='sample']))
# time. = c(time[p$sampleType=='qc'],time[p$sampleType=='sample'])
# sampleType. = c(p$sampleType[p$sampleType=='qc'],p$sampleType[p$sampleType=='sample'])
serrf_normalized = e
serrf_normalized_modeled = serrfR(train = e_qc, target = e_sample, num = num,batch. = factor(c(p_qc$batch, p_sample$batch)),time. = c(p_qc$time, p_sample$time),sampleType. = c(p_qc$sampleType, p_sample$sampleType),minus,cl)
serrf_qc = serrf_normalized_modeled$normed_train
colnames(serrf_qc) = colnames(e_qc)
serrf_sample = serrf_normalized_modeled$normed_target
colnames(serrf_sample) = colnames(e_sample)
serrf_cross_validated_qc = e_qc
cv = 5
RSDs = list()
if(any(table(p_qc$batch))<7){
ratio = 0.7
}else{
ratio = 0.8
}
serrf_qc = serrf_normalized_modeled$normed_train
colnames(serrf_qc) = colnames(e_qc)
serrf_sample = serrf_normalized_modeled$normed_target
colnames(serrf_sample) = colnames(e_sample)
serrf_cross_validated_qc = e_qc
cv = 5
RSDs = list()
if(any(table(p_qc$batch))<7){
ratio = 0.7
}else{
ratio = 0.8
}
test_indexes = split(1L:nrow(p_qc), c(1L:nrow(p_qc))%%cv)
showNotification(paste0("Performing ",cv, "-fold Cross-Validation"), duration = 30000)
# withProgress(message = paste0(cv,'-fold Cross-Validation in Progress.'), value = 0, { # HERE
for(k in 1:cv){
# incProgress(1/cv, detail = paste("Working on the", k,"th cross-validation.")) # HERE
test_index = test_indexes[[k]]
train_index = c(1L:nrow(p_qc))[-test_index]
set.seed(k)
train_index = sample(1L:sum(p$sampleType=='qc'),round(sum(p$sampleType=='qc')*ratio))
test_index = c(1L:sum(p$sampleType=='qc'))[!(c(1L:sum(p$sampleType=='qc'))%in%train_index)]
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
if(identical(try,"Error")){
RSDs[[k]] = NA
}else{
serrf_cross_validated_qc[,test_index] = serrf_normalized_on_cross_validate$normed_target
RSDs[[k]] = RSD(serrf_normalized_on_cross_validate$normed_target)
}
}
k
train_index
test_index
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
(length(unique(p_qc$batch[test_index]))<length(unique(batch)))
batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index]))
sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index)))
table(batch., sampleType.)
length(unique(p_qc$batch[test_index]))
length(unique(batch))
batch
batch
p$batch
length(unique(batch))
p_qc$batch
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(p_qc$batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
# withProgress(message = paste0(cv,'-fold Cross-Validation in Progress.'), value = 0, { # HERE
for(k in 1:cv){
# incProgress(1/cv, detail = paste("Working on the", k,"th cross-validation.")) # HERE
test_index = test_indexes[[k]]
train_index = c(1L:nrow(p_qc))[-test_index]
set.seed(k)
train_index = sample(1L:sum(p$sampleType=='qc'),round(sum(p$sampleType=='qc')*ratio))
test_index = c(1L:sum(p$sampleType=='qc'))[!(c(1L:sum(p$sampleType=='qc'))%in%train_index)]
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(p_qc$batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
if(identical(try,"Error")){
RSDs[[k]] = NA
}else{
serrf_cross_validated_qc[,test_index] = serrf_normalized_on_cross_validate$normed_target
RSDs[[k]] = RSD(serrf_normalized_on_cross_validate$normed_target)
}
}
# withProgress(message = paste0(cv,'-fold Cross-Validation in Progress.'), value = 0, { # HERE
for(k in 1:cv){
# incProgress(1/cv, detail = paste("Working on the", k,"th cross-validation.")) # HERE
test_index = test_indexes[[k]]
train_index = c(1L:nrow(p_qc))[-test_index]
set.seed(k)
train_index = sample(1L:sum(p$sampleType=='qc'),round(sum(p$sampleType=='qc')*ratio))
test_index = c(1L:sum(p$sampleType=='qc'))[!(c(1L:sum(p$sampleType=='qc'))%in%train_index)]
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(p_qc$batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
if(identical(try,"Error")){
RSDs[[k]] = NA
}else{
serrf_cross_validated_qc[,test_index] = serrf_normalized_on_cross_validate$normed_target
RSDs[[k]] = RSD(serrf_normalized_on_cross_validate$normed_target)
}
}
# withProgress(message = paste0(cv,'-fold Cross-Validation in Progress.'), value = 0, { # HERE
for(k in 1:cv){
# incProgress(1/cv, detail = paste("Working on the", k,"th cross-validation.")) # HERE
test_index = test_indexes[[k]]
train_index = c(1L:nrow(p_qc))[-test_index]
set.seed(k)
train_index = sample(1L:sum(p$sampleType=='qc'),round(sum(p$sampleType=='qc')*ratio))
test_index = c(1L:sum(p$sampleType=='qc'))[!(c(1L:sum(p$sampleType=='qc'))%in%train_index)]
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(p_qc$batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
if(identical(try,"Error")){
RSDs[[k]] = NA
}else{
serrf_cross_validated_qc[,test_index] = serrf_normalized_on_cross_validate$normed_target
RSDs[[k]] = RSD(serrf_normalized_on_cross_validate$normed_target)
}
}
# withProgress(message = paste0(cv,'-fold Cross-Validation in Progress.'), value = 0, { # HERE
for(k in 1:cv){
# incProgress(1/cv, detail = paste("Working on the", k,"th cross-validation.")) # HERE
test_index = test_indexes[[k]]
train_index = c(1L:nrow(p_qc))[-test_index]
set.seed(k)
train_index = sample(1L:sum(p$sampleType=='qc'),round(sum(p$sampleType=='qc')*ratio))
test_index = c(1L:sum(p$sampleType=='qc'))[!(c(1L:sum(p$sampleType=='qc'))%in%train_index)]
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(p_qc$batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
if(identical(try,"Error")){
RSDs[[k]] = NA
}else{
serrf_cross_validated_qc[,test_index] = serrf_normalized_on_cross_validate$normed_target
RSDs[[k]] = RSD(serrf_normalized_on_cross_validate$normed_target)
}
}
# withProgress(message = paste0(cv,'-fold Cross-Validation in Progress.'), value = 0, { # HERE
for(k in 1:cv){
# incProgress(1/cv, detail = paste("Working on the", k,"th cross-validation.")) # HERE
test_index = test_indexes[[k]]
train_index = c(1L:nrow(p_qc))[-test_index]
set.seed(k)
train_index = sample(1L:sum(p$sampleType=='qc'),round(sum(p$sampleType=='qc')*ratio))
test_index = c(1L:sum(p$sampleType=='qc'))[!(c(1L:sum(p$sampleType=='qc'))%in%train_index)]
kk = k*10
while(length(unique(p_qc$batch[test_index]))<length(unique(p_qc$batch))){
set.seed(kk)
train_index = sample(1L:nrow(p_qc),round(nrow(p_qc)*ratio))
test_index = c(1L:nrow(p_qc))[!(c(1L:nrow(p_qc))%in%train_index)]
kk = kk+1
}
try = tryCatch({#!!!
serrf_normalized_on_cross_validate = serrfR(train = e_qc[,train_index], target = e_qc[,test_index], num = num,batch. = factor(c(p_qc$batch[train_index],p_qc$batch[test_index])),time. = c(p_qc$time[train_index],p_qc$time[test_index]),sampleType. = rep(c("qc","sample"),c(length(train_index),length(test_index))),minus,cl)
}, error = function(e){
"Error"
})
if(identical(try,"Error")){
RSDs[[k]] = NA
}else{
serrf_cross_validated_qc[,test_index] = serrf_normalized_on_cross_validate$normed_target
RSDs[[k]] = RSD(serrf_normalized_on_cross_validate$normed_target)
}
}
shiny::runApp()
shiny::runApp()
?showNotification
